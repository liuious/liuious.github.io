I"<7<p>SDWebImage托管在github上<a href="SDWebImage托管在github上。https://github.com/rs/SDWebImage">https://github.com/rs/SDWebImage</a></p>

<p><strong>SDWebImage</strong>功能如下：</p>

<ul>
  <li>提供UIImageView的一个分类，以支持网络图片的加载与缓存管理</li>
  <li>一个异步的图片加载器</li>
  <li>一个异步的内存+磁盘图片缓存</li>
  <li>支持GIF图片</li>
  <li>支持WebP图片</li>
  <li>后台图片解压缩处理</li>
</ul>

<p>主要优点</p>

<ul>
  <li>确保同一个URL的图片不被下载多次</li>
  <li>确保虚假的URL不会被反复加载</li>
  <li>确保下载及缓存时，主线程不被阻塞</li>
</ul>

<p><strong>主要代码解析：</strong><br />
下载的枚举类型</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="k">typedef</span> <span class="nf">NS_OPTIONS</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">,</span> <span class="n">SDWebImageDownloaderOptions</span><span class="p">)</span> <span class="p">{</span>
   
  <span class="n">SDWebImageDownloaderLowPriority</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">,</span>
    
  <span class="n">SDWebImageDownloaderProgressiveDownload</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">,</span>
    
  <span class="cm">/**
   * By default, request prevent the of NSURLCache. With this flag, NSURLCache
   * is used with default policies.
   * 默认情况下请求，但是不实用NSURLCache，如果设置该选项，则以默认的缓存策略来使用NSURLCache
  */</span>
  <span class="n">SDWebImageDownloaderUseNSURLCache</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">,</span>
    
  <span class="cm">/**
   * Call completion block with nil image/imageData if the image was read from NSURLCache
   * (to be combined with SDWebImageDownloaderUseNSURLCache ).
   * 如果从NSURLCache缓存中读取图片，则使用nil作为参数来调用完成block
   */</span>
     
  <span class="n">SDWebImageDownloaderIgnoreCachedResponse</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">,</span>
    
  <span class="cm">/**
   * In iOS 4+, continue the download of the image if the app goes to background. This is achieved by asking the system for
   * extra time in background to let the request finish. If the background task expires the operation will be cancelled.
   * 在iOS4+中， 允许程序在后台下载图片， 该操作通过向系统申请额外的时间来完成后台下载，如果后台任务终止，则会被取消。
  */</span>
     
  <span class="n">SDWebImageDownloaderContinueInBackground</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">,</span>
    
  <span class="cm">/**
   * Handles cookies stored in NSHTTPCookieStore by setting 
   * NSMutableURLRequest.HTTPShouldHandleCookies = YES;
   * 通过设置NSMutableURLRequest。httpshouldHandleCookies=YES来处理存储在NSHTTPCookieStore中的cookie
   */</span>
     
  <span class="n">SDWebImageDownloaderHandleCookies</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">,</span>
    
  <span class="cm">/**
   * Enable to allow untrusted SSL ceriticates.
   * Useful for testing purposes. Use with caution in production.
   * 允许不受信任的ssl证书，主要用于测试目的
   */</span>
     
  <span class="n">SDWebImageDownloaderAllowInvalidSSLCertificates</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span><span class="p">,</span>
    
  <span class="cm">/**
   * Put the image in the high priority queue.
   * 将图片下载防盗高优先级队列中
   */</span>
  <span class="n">SDWebImageDownloaderHighPriority</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">7</span><span class="p">,</span>
<span class="p">};</span> </code></pre></figure>

<p>下载顺序:
SDWebImage提供了两种下载顺序，一种是以队列方式（先进先出），一种是以栈的方式（后进先出）。</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="k">typedef</span> <span class="nf">NS_ENUM</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">,</span> <span class="n">SDWebImageDownloaderExecutionOrder</span><span class="p">)</span> <span class="p">{</span> 
    <span class="cm">/**
     * Default value. All download operations will execute in queue style (first-in-first-out).
     * 默认用队列的方式， 按照fifo的方式下载
     */</span>
    <span class="n">SDWebImageDownloaderFIFOExecutionOrder</span><span class="p">,</span>
    <span class="cm">/**
     * All download operations will execute in stack style (last-in-first-out).
     * 以栈的方式
     */</span>
    <span class="n">SDWebImageDownloaderLIFOExecutionOrder</span>
<span class="p">};</span></code></pre></figure>

<p>下载任务管理器
SDWebImageDownloader下载管理器是一个单例类，主要负责图片的下载操作管理，图片的下载是放在一个NSOperationQueue操作队列中来完成的，它的声明如下：</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="err">@</span><span class="n">property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSOperationQueue</span> <span class="o">*</span><span class="n">downloadQueue</span><span class="p">;</span>  <span class="c1">//使用NSOperationQueue操作队列来完成下来</span>
<span class="err">默认情况下，队列最大的并发数是</span><span class="mi">6</span><span class="err">，如果需要我们可以通过</span><span class="n">SDWebImageDownloader</span><span class="err">类的</span><span class="n">maxConcurrentDownloads</span><span class="err">属性来修改。</span>
<span class="err">所有下载操作的网络响应序列化处理都放在一个自定义的并行调度队列中来处理，其声明及定义如下：</span> 
<span class="err">@</span><span class="n">property</span> <span class="p">(</span><span class="n">SDDispatchQueueSetterSementics</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">dispatch_queue_t</span> <span class="n">barrierQueue</span><span class="p">;</span>
<span class="o">-</span> <span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="n">init</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">]))</span> <span class="p">{</span>
        <span class="p">...</span>
        <span class="n">_barrierQueue</span> <span class="o">=</span> <span class="n">dispatch_queue_create</span><span class="p">(</span><span class="s">"com.hackemist.SDWebImageDownloaderBarrierQueue"</span><span class="p">,</span> <span class="n">DISPATCH_QUEUE_CONCURRENT</span><span class="p">);</span>
        <span class="p">...</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>每一个图片的下载都会对应一些回调操作，如下载进度回调、下载结果回调等，这些回调操作是block形式来呈现，为此在SDWebImageDownloader.h中定义了几个block，</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cm">/**
 *  下载进度回调
 */</span>
<span class="k">typedef</span> <span class="nf">void</span><span class="p">(</span><span class="o">^</span><span class="n">SDWebImageDownloaderProgressBlock</span><span class="p">)(</span><span class="n">NSInteger</span> <span class="n">receivedSize</span><span class="p">,</span> <span class="n">NSInteger</span> <span class="n">expectedSize</span><span class="p">,</span> <span class="n">NSData</span> <span class="o">*</span> <span class="n">data</span><span class="p">);</span>
<span class="cm">/**
 *  下载完成回调
 */</span>
<span class="k">typedef</span> <span class="nf">void</span><span class="p">(</span><span class="o">^</span><span class="n">SDWebImageDownloaderCompletedBlock</span><span class="p">)(</span><span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span><span class="p">,</span> <span class="n">NSData</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">,</span> <span class="n">BOOL</span> <span class="n">finished</span><span class="p">);</span>
<span class="cm">/**
 *  Header过滤
 */</span>
<span class="k">typedef</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="p">(</span><span class="o">^</span><span class="n">SDWebImageDownloaderHeadersFilterBlock</span><span class="p">)(</span><span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span><span class="p">,</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">headers</span><span class="p">);</span></code></pre></figure>

<p>图片下载的这些回调信息存储在SDWebImageDownloader类的URLCallbacks属性中，该属性是个字典，key为图片的URL地址，value是个数组，包含每个图片的多组回调信息，由于我们允许多个图片同事下载，因此可能会有多个线程对URLCallbacks同事操作，为了保证URLCallbacks操作的线程安全性，SDWebImageDownloader将这些操作作为一个任务放在barrierQueue队列中，并设置屏障来确保同一时间只有一个线程操作URLCallbacks属性，我们以添加操作为例，</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">addProgressCallback</span><span class="o">:</span><span class="p">(</span><span class="n">SDWebImageDownloaderProgressBlock</span><span class="p">)</span><span class="n">progressBlock</span> <span class="n">andCompletedBlock</span><span class="o">:</span><span class="p">(</span><span class="n">SDWebImageDownloaderCompletedBlock</span><span class="p">)</span><span class="n">completedBlock</span> <span class="n">forURL</span><span class="o">:</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="n">url</span> <span class="n">createCallback</span><span class="o">:</span><span class="p">(</span><span class="n">SDWebImageNoParamsBlock</span><span class="p">)</span><span class="n">createCallback</span> <span class="p">{</span>
 <span class="p">...</span>
 
    <span class="cm">/**
     *  确保同一时间只有一个线程能对URLCallbacks进行操作,有兴趣的同学可以查阅下dispatch_barrier_sync方法相关的描述这里不一一细说
     */</span>
    <span class="n">dispatch_barrier_sync</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">barrierQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
 <span class="p">...</span>
        <span class="c1">// Handle single download of simultaneous download request for the same URL</span>
        <span class="c1">// 处理同一url的同步下载请求的单个下载</span>
        <span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">callbacksForURL</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">URLCallbacks</span><span class="p">[</span><span class="n">url</span><span class="p">];</span>
        <span class="n">NSMutableDictionary</span> <span class="o">*</span><span class="n">callbacks</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableDictionary</span> <span class="n">new</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">progressBlock</span><span class="p">)</span> <span class="n">callbacks</span><span class="p">[</span><span class="n">kProgressCallbackKey</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">progressBlock</span> <span class="n">copy</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">completedBlock</span><span class="p">)</span> <span class="n">callbacks</span><span class="p">[</span><span class="n">kCompletedCallbackKey</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">completedBlock</span> <span class="n">copy</span><span class="p">];</span>
        <span class="p">[</span><span class="n">callbacksForURL</span> <span class="n">addObject</span><span class="o">:</span><span class="n">callbacks</span><span class="p">];</span>
        <span class="n">self</span><span class="p">.</span><span class="n">URLCallbacks</span><span class="p">[</span><span class="n">url</span><span class="p">]</span> <span class="o">=</span> <span class="n">callbacksForURL</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">first</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">createCallback</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">}</span></code></pre></figure>
:ET